# Generated by Django 3.2.12 on 2022-03-17 18:52

import bio_diversity.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AniDetailXref',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('final_contx_flag', models.BooleanField(blank=True, db_column='FINAL_CONTAINER_FLAG', default=None, null=True, verbose_name='Final Container in movement')),
            ],
        ),
        migrations.CreateModel(
            name='AniDetSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnimalDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(blank=True, db_column='MIN_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(blank=True, db_column='MAX_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Maximum Value')),
                ('ani_subj_flag', models.BooleanField(db_column='ANI_SUBJ_FLAG', verbose_name='Subjective?')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContainerDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(db_column='MIN_VAL', decimal_places=5, max_digits=11, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(db_column='MAX_VAL', decimal_places=5, max_digits=11, verbose_name='Maximum Value')),
                ('cont_subj_flag', models.BooleanField(db_column='CONT_SUBJ_FLAG', verbose_name='Subjective detail?')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContainerXRef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
        ),
        migrations.CreateModel(
            name='ContDetSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('contdc_id', models.ForeignKey(db_column='CONT_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container detail code')),
            ],
            options={
                'unique_together': {('name', 'contdc_id')},
            },
        ),
        migrations.CreateModel(
            name='Count',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('cnt_year', models.IntegerField(blank=True, db_column='YEAR', default=None, null=True, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)], verbose_name='Collection year')),
                ('cnt', models.DecimalField(db_column='COUNT', decimal_places=0, max_digits=6, verbose_name='Count')),
                ('cnt_date', models.DateField(default=datetime.date(1, 1, 1), verbose_name='Count Date')),
                ('est', models.BooleanField(db_column='ESTIMATED', verbose_name='Estimated?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('anix_id', models.ForeignKey(blank=True, db_column='ANI_DET_XREF_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counts', to='bio_diversity.anidetailxref', verbose_name='Animal Cross Reference')),
            ],
        ),
        migrations.CreateModel(
            name='CountCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('start_date', models.DateField(db_column='START_DATE', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_column='END_DATE', null=True, verbose_name='End Date')),
            ],
            options={
                'ordering': ['draw_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CupDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, db_column='VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(db_column='DET_START', verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, db_column='DET_END', null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(db_column='STILL_VALID', default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, db_column='CONT_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(db_column='CONT_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('cup_id', models.ForeignKey(db_column='CUP_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.cup', verbose_name='Cup')),
            ],
            options={
                'unique_together': {('cup_id', 'contdc_id', 'cdsc_id', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='EnvCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(blank=True, db_column='MIN_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(blank=True, db_column='MAX_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Maximum Value')),
                ('env_subj_flag', models.BooleanField(db_column='ENV_SUBJ_FLAG', verbose_name='Objective observation?')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnvTreatCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('rec_dose', models.CharField(blank=True, db_column='ENV_REC_DOSAGE', max_length=400, null=True, verbose_name='Recommended Dosage')),
                ('manufacturer', models.CharField(db_column='MANUFACTURER', max_length=50, verbose_name='Treatment Manufacturer')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_datetime', models.DateTimeField(db_column='START', verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, db_column='END', null=True, verbose_name='End date')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EventCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventFileCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FacilityCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeedCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('manufacturer', models.CharField(db_column='MANUFACTURER', max_length=50, verbose_name='Maufacturer')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeedMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('grp_year', models.IntegerField(db_column='YEAR', default=2000, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)], verbose_name='Collection year')),
                ('grp_end_date', models.DateField(blank=True, db_column='GROUP_END_DATE', null=True, verbose_name='Group end date')),
                ('grp_valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Group still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTTS', max_length=2000, null=True, verbose_name='Comments')),
                ('coll_id', models.ForeignKey(db_column='COLLECTION_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.collection', verbose_name='Collection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HeathUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(db_column='NAME', max_length=255, verbose_name='name (en)')),
                ('facic_id', models.ForeignKey(db_column='FAC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility')),
            ],
            options={
                'ordering': ['facic_id', 'name'],
                'unique_together': {('name', 'facic_id')},
            },
        ),
        migrations.CreateModel(
            name='HeathUnitDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, db_column='VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(db_column='DET_START', verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, db_column='DET_END', null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(db_column='STILL_VALID', default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, db_column='CONT_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(db_column='CONT_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('heat_id', models.ForeignKey(db_column='HEATH_UNIT_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.heathunit', verbose_name='Heath Unit')),
            ],
            options={
                'unique_together': {('heat_id', 'contdc_id', 'cdsc_id', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='HelpText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('eng_text', models.TextField(verbose_name='English text')),
                ('fra_text', models.TextField(blank=True, null=True, verbose_name='French text')),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['field_name'],
            },
        ),
        migrations.CreateModel(
            name='ImageCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('indv_year', models.IntegerField(db_column='YEAR', default=2000, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)], verbose_name='Collection year')),
                ('ufid', models.CharField(blank=True, db_column='UFID', max_length=50, null=True, unique=True, verbose_name='ABL Fish UFID')),
                ('pit_tag', models.CharField(blank=True, db_column='PIT_TAG', max_length=50, null=True, unique=True, verbose_name='PIT tag ID')),
                ('indv_valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Entry still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('coll_id', models.ForeignKey(db_column='COLLECTION_ID', default=25, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.collection', verbose_name='Collection')),
                ('grp_id', models.ForeignKey(blank=True, db_column='GROUP_ID', limit_choices_to={'grp_valid': True}, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.group', verbose_name='From Parent Group')),
            ],
            options={
                'ordering': ['pit_tag', 'indv_year'],
            },
        ),
        migrations.CreateModel(
            name='IndTreatCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('rec_dose', models.CharField(db_column='IND_REC_DOSAGE', max_length=400, verbose_name='Recommended Dosage')),
                ('manufacturer', models.CharField(db_column='IND_MANUFACTURER', max_length=50, verbose_name='Treatment Manufacturer')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('loc_lat', models.DecimalField(blank=True, db_column='LATITUDE', decimal_places=6, max_digits=8, null=True, verbose_name='Latitude')),
                ('loc_lon', models.DecimalField(blank=True, db_column='LONGITUDE', decimal_places=6, max_digits=9, null=True, verbose_name='Longitude')),
                ('end_lat', models.DecimalField(blank=True, db_column='END_LATITUDE', decimal_places=6, max_digits=8, null=True, verbose_name='End Latitude')),
                ('end_lon', models.DecimalField(blank=True, db_column='END_LONGITUDE', decimal_places=6, max_digits=9, null=True, verbose_name='End Longitude')),
                ('loc_date', models.DateTimeField(db_column='LOCATION_DATE', verbose_name='Start date')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('evnt_id', models.ForeignKey(db_column='EVENT_ID', on_delete=django.db.models.deletion.CASCADE, related_name='location', to='bio_diversity.event', verbose_name='Event')),
            ],
        ),
        migrations.CreateModel(
            name='LocationDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(blank=True, db_column='MIN_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(blank=True, db_column='MAX_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Maximum Value')),
                ('loc_subj_flag', models.BooleanField(db_column='CONT_SUBJ_FLAG', verbose_name='Subjective detail?')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pairing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(db_column='START', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_column='END', null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('cross', models.IntegerField(db_column='CROSS', verbose_name='Cross')),
                ('indv_id', models.ForeignKey(blank=True, db_column='INDIVIDUAL', limit_choices_to={'indv_valid': True, 'pit_tag__isnull': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pairings', to='bio_diversity.individual', verbose_name='Dam')),
            ],
        ),
        migrations.CreateModel(
            name='PersonnelCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('perc_last_name', models.CharField(max_length=32, verbose_name='Last Name')),
                ('perc_first_name', models.CharField(max_length=32, verbose_name='First Name')),
                ('initials', models.CharField(blank=True, max_length=4, null=True, unique=True, verbose_name='Initials')),
                ('perc_valid', models.BooleanField(default='False', verbose_name='Record still valid?')),
            ],
            options={
                'ordering': ['perc_last_name', 'perc_first_name'],
                'unique_together': {('perc_first_name', 'perc_last_name')},
            },
        ),
        migrations.CreateModel(
            name='PriorityCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProgAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('proga_last_name', models.CharField(db_column='PROG_AUTH_LAST_NAME', max_length=32, verbose_name='Last Name')),
                ('proga_first_name', models.CharField(db_column='PROG_AUTH_FIRST_NAME', max_length=32, verbose_name='First Name')),
            ],
            options={
                'unique_together': {('proga_first_name', 'proga_last_name')},
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(db_column='START', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_column='END', null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('prog_name', models.CharField(db_column='PROGRAM_NAME', max_length=30, unique=True, verbose_name='Program Name')),
                ('prog_desc', models.CharField(db_column='PROGRAM_DESC', max_length=4000, verbose_name='Program Description')),
                ('orga_id', models.ForeignKey(db_column='ORG_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.organization', verbose_name='Organization')),
                ('proga_id', models.ForeignKey(db_column='PROG_AUTH_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.progauthority', verbose_name='Program Authority')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtoCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(db_column='START', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_column='END', null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('name', models.CharField(db_column='PROTOCOL_NAME', max_length=25, verbose_name='Protocol Name')),
                ('prot_desc', models.CharField(db_column='PROTOCOL_DESC', max_length=4000, verbose_name='Protocol Description')),
                ('evntc_id', models.ForeignKey(blank=True, db_column='EVT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.eventcode', verbose_name='Event Code')),
                ('facic_id', models.ForeignKey(db_column='FAC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility')),
                ('prog_id', models.ForeignKey(db_column='PROGRAM_ID', limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, related_name='protocols', to='bio_diversity.program', verbose_name='Program')),
                ('protc_id', models.ForeignKey(db_column='PROTO_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.protocode', verbose_name='Protocol Code')),
            ],
            options={
                'unique_together': {('name', 'prog_id', 'protc_id', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='QualCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiverCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoleCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('samp_num', models.CharField(db_column='SAMPLE_FISHNO', max_length=50, verbose_name='Sample Fish Number')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('anix_id', models.ForeignKey(blank=True, db_column='ANI_DET_X_REF_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetailxref', verbose_name='Animal Detail X Ref')),
                ('loc_id', models.ForeignKey(blank=True, db_column='LOCATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='bio_diversity.location', verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='SampleCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpawnDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(blank=True, db_column='MIN_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(blank=True, db_column='MAX_VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Maximum Value')),
                ('spwn_subj_flag', models.BooleanField(db_column='SPAWN_SUBJ_FLAG', verbose_name='Subjective?')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpeciesCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(db_column='SPEC_SHORT', max_length=10, verbose_name='Species Name')),
                ('species', models.CharField(db_column='SPECIES', max_length=100, verbose_name='Species')),
                ('com_name', models.CharField(blank=True, db_column='COMMON_NAME', max_length=35, null=True, verbose_name='Species Common Name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StockCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubRiverCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('rive_id', models.ForeignKey(db_column='RIVER_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rivercode', verbose_name='River')),
            ],
        ),
        migrations.CreateModel(
            name='Tank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(db_column='NAME', max_length=255, verbose_name='name (en)')),
                ('facic_id', models.ForeignKey(db_column='FAC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility')),
            ],
            options={
                'ordering': ['facic_id', 'name'],
                'unique_together': {('name', 'facic_id')},
            },
        ),
        migrations.CreateModel(
            name='Tray',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('start_date', models.DateField(db_column='START_DATE', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_column='END_DATE', null=True, verbose_name='End Date')),
            ],
            options={
                'ordering': ['trof_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Trough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(db_column='NAME', max_length=255, verbose_name='name (en)')),
                ('facic_id', models.ForeignKey(db_column='FAC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility')),
            ],
            options={
                'ordering': ['facic_id', 'name'],
                'unique_together': {('name', 'facic_id')},
            },
        ),
        migrations.CreateModel(
            name='UnitCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TroughDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, db_column='VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(db_column='DET_START', verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, db_column='DET_END', null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(db_column='STILL_VALID', default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, db_column='CONT_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(db_column='CONT_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('trof_id', models.ForeignKey(db_column='TROUGH_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.trough', verbose_name='Trough')),
            ],
            options={
                'unique_together': {('trof_id', 'contdc_id', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='Tributary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('rive_id', models.ForeignKey(db_column='RIVER_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rivercode', verbose_name='River')),
                ('subr_id', models.ForeignKey(blank=True, db_column='SUBRIVER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.subrivercode', verbose_name='Subriver')),
            ],
            options={
                'unique_together': {('name', 'rive_id', 'subr_id')},
            },
        ),
        migrations.CreateModel(
            name='TrayDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, db_column='VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(db_column='DET_START', verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, db_column='DET_END', null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(db_column='STILL_VALID', default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, db_column='CONT_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(db_column='CONT_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('tray_id', models.ForeignKey(db_column='TRAY_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tray', verbose_name='Tray')),
            ],
            options={
                'unique_together': {('tray_id', 'contdc_id', 'start_date')},
            },
        ),
        migrations.AddField(
            model_name='tray',
            name='trof_id',
            field=models.ForeignKey(db_column='TROUGH_ID', on_delete=django.db.models.deletion.CASCADE, related_name='trays', to='bio_diversity.trough', verbose_name='Trough'),
        ),
        migrations.CreateModel(
            name='TeamXRef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('evnt_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.event', verbose_name='Event')),
                ('loc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.location', verbose_name='Location')),
                ('perc_id', models.ForeignKey(limit_choices_to={'perc_valid': True}, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.personnelcode', verbose_name='Team Member')),
                ('role_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rolecode', verbose_name='Role Code')),
            ],
            options={
                'unique_together': {('perc_id', 'role_id', 'evnt_id', 'loc_id')},
            },
        ),
        migrations.CreateModel(
            name='TankDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, db_column='VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(db_column='DET_START', verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, db_column='DET_END', null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(db_column='STILL_VALID', default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, db_column='CONT_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(db_column='CONT_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('tank_id', models.ForeignKey(db_column='TANK_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tank', verbose_name='Tank')),
            ],
            options={
                'unique_together': {('tank_id', 'contdc_id', 'start_date')},
            },
        ),
        migrations.AddField(
            model_name='subrivercode',
            name='trib_id',
            field=models.ForeignKey(blank=True, db_column='TRIB_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tributary', verbose_name='Tributary'),
        ),
        migrations.CreateModel(
            name='SpawnDetSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('spwndc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.spawndetcode', verbose_name='Spawn Detail Code')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='spawndetcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, db_column='UNIT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.CreateModel(
            name='SpawnDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.CharField(blank=True, db_column='VAL', max_length=20, null=True, verbose_name='Value')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('pair_id', models.ForeignKey(db_column='PAIR_ID', on_delete=django.db.models.deletion.CASCADE, related_name='spawning_details', to='bio_diversity.pairing', verbose_name='Pairing')),
                ('qual_id', models.ForeignKey(db_column='QUAL_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
                ('spwndc_id', models.ForeignKey(db_column='SPAWN_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.spawndetcode', verbose_name='Spawning Detail Code')),
                ('spwnsc_id', models.ForeignKey(blank=True, db_column='SPAWN_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.spawndetsubjcode', verbose_name='Spawning Detail Subjective Code')),
            ],
            options={
                'unique_together': {('pair_id', 'spwndc_id', 'spwnsc_id')},
            },
        ),
        migrations.CreateModel(
            name='SampleDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.CharField(blank=True, db_column='VAL', max_length=20, null=True, verbose_name='Value')),
                ('detail_date', models.DateField(db_column='DETAIL_DATE', verbose_name='Date detail was recorded')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('adsc_id', models.ForeignKey(blank=True, db_column='ANI_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code')),
                ('anidc_id', models.ForeignKey(db_column='ANI_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code')),
                ('qual_id', models.ForeignKey(db_column='QUAL_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
                ('samp_id', models.ForeignKey(db_column='SAMPLE_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.sample', verbose_name='Sample')),
            ],
            options={
                'unique_together': {('samp_id', 'anidc_id', 'adsc_id')},
            },
        ),
        migrations.AddField(
            model_name='sample',
            name='sampc_id',
            field=models.ForeignKey(db_column='SAMP_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.samplecode', verbose_name='Sample Code'),
        ),
        migrations.AddField(
            model_name='sample',
            name='spec_id',
            field=models.ForeignKey(db_column='SPEC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.CreateModel(
            name='ReleaseSiteCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_lat', models.DecimalField(blank=True, db_column='MIN_LATITUDE', decimal_places=6, max_digits=8, null=True, verbose_name='Min Latitude')),
                ('max_lat', models.DecimalField(blank=True, db_column='MAX_LATITUDE', decimal_places=6, max_digits=8, null=True, verbose_name='Max Latitude')),
                ('min_lon', models.DecimalField(blank=True, db_column='MIN_LONGITUDE', decimal_places=6, max_digits=9, null=True, verbose_name='Min Longitude')),
                ('max_lon', models.DecimalField(blank=True, db_column='MAX_LONGITUDE', decimal_places=6, max_digits=9, null=True, verbose_name='Max Longitude')),
                ('rive_id', models.ForeignKey(db_column='RIVER_ID', on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='bio_diversity.rivercode', verbose_name='River')),
                ('subr_id', models.ForeignKey(blank=True, db_column='SUBRIVER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.subrivercode', verbose_name='SubRiver Code')),
                ('trib_id', models.ForeignKey(blank=True, db_column='TRIB_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tributary', verbose_name='Tributary')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Protofile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('protf_pdf', models.FileField(blank=True, db_column='PROTO_FILE', null=True, upload_to=bio_diversity.models.protf_directory_path, verbose_name='Protocol File')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('prot_id', models.ForeignKey(db_column='PROTOCOL_ID', limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, related_name='protf_id', to='bio_diversity.protocol', verbose_name='Protocol')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='pairing',
            name='pair_prio_id',
            field=models.ForeignKey(db_column='PAIR_PRIORITY_ID', on_delete=django.db.models.deletion.CASCADE, related_name='pair_priorities', to='bio_diversity.prioritycode', verbose_name='Priority of Pair'),
        ),
        migrations.AddField(
            model_name='pairing',
            name='prio_id',
            field=models.ForeignKey(db_column='PRIORITY_ID', on_delete=django.db.models.deletion.CASCADE, related_name='female_priorities', to='bio_diversity.prioritycode', verbose_name='Priority of Female'),
        ),
        migrations.AddField(
            model_name='pairing',
            name='samp_id',
            field=models.ForeignKey(blank=True, db_column='SAMPLE', limit_choices_to={'anix_id__isnull': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pairings', to='bio_diversity.sample', verbose_name='sample'),
        ),
        migrations.CreateModel(
            name='LocDetSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('locdc_id', models.ForeignKey(db_column='LOC_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.locationdetcode', verbose_name='Location detail code')),
            ],
            options={
                'unique_together': {('name', 'locdc_id')},
            },
        ),
        migrations.AddField(
            model_name='locationdetcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, db_column='UNIT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='location',
            name='locc_id',
            field=models.ForeignKey(db_column='LOC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.loccode', verbose_name='Location Code'),
        ),
        migrations.AddField(
            model_name='location',
            name='relc_id',
            field=models.ForeignKey(blank=True, db_column='SITE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='bio_diversity.releasesitecode', verbose_name='Site Code'),
        ),
        migrations.AddField(
            model_name='location',
            name='rive_id',
            field=models.ForeignKey(blank=True, db_column='RIVER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rivercode', verbose_name='River'),
        ),
        migrations.AddField(
            model_name='location',
            name='subr_id',
            field=models.ForeignKey(blank=True, db_column='SUBRIVER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.subrivercode', verbose_name='SubRiver Code'),
        ),
        migrations.AddField(
            model_name='location',
            name='trib_id',
            field=models.ForeignKey(blank=True, db_column='TRIB_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tributary', verbose_name='Tributary'),
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('serial_number', models.CharField(blank=True, db_column='SERIAL_NUMBER', max_length=250, null=True, unique=True, verbose_name='Serial Number')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('instc_id', models.ForeignKey(db_column='INST_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instrumentcode', verbose_name='Instrument Code')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndividualDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.CharField(blank=True, db_column='VAL', max_length=20, null=True, verbose_name='Value')),
                ('detail_date', models.DateField(db_column='DETAIL_DATE', verbose_name='Date detail was recorded')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('indvd_valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Detail still valid?')),
                ('adsc_id', models.ForeignKey(blank=True, db_column='ANI_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code')),
                ('anidc_id', models.ForeignKey(db_column='ANI_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code')),
                ('anix_id', models.ForeignKey(db_column='ANI_DET_XREF_ID', on_delete=django.db.models.deletion.CASCADE, related_name='individual_details', to='bio_diversity.anidetailxref', verbose_name='Animal Detail Cross Reference')),
                ('qual_id', models.ForeignKey(db_column='QUAL_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
            ],
            options={
                'unique_together': {('anix_id', 'anidc_id', 'adsc_id')},
            },
        ),
        migrations.AddField(
            model_name='individual',
            name='spec_id',
            field=models.ForeignKey(db_column='SPEC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.AddField(
            model_name='individual',
            name='stok_id',
            field=models.ForeignKey(db_column='STOCK_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.stockcode', verbose_name='Stock Code'),
        ),
        migrations.CreateModel(
            name='GroupDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.CharField(blank=True, db_column='VAL', max_length=20, null=True, verbose_name='Value')),
                ('detail_date', models.DateField(db_column='DETAIL_DATE', verbose_name='Date detail was recorded')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('grpd_valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Detail still valid?')),
                ('adsc_id', models.ForeignKey(blank=True, db_column='ANI_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code')),
                ('anidc_id', models.ForeignKey(db_column='ANI_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code')),
                ('anix_id', models.ForeignKey(db_column='ANI_DET_XREF_ID', on_delete=django.db.models.deletion.CASCADE, related_name='group_details', to='bio_diversity.anidetailxref', verbose_name='Animal Detail Cross Reference')),
                ('frm_grp_id', models.ForeignKey(blank=True, db_column='FROM_GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.group', verbose_name='From Parent Group')),
                ('qual_id', models.ForeignKey(db_column='QUAL_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
            ],
            options={
                'unique_together': {('anix_id', 'anidc_id', 'adsc_id', 'frm_grp_id')},
            },
        ),
        migrations.AddField(
            model_name='group',
            name='spec_id',
            field=models.ForeignKey(db_column='SPEC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.AddField(
            model_name='group',
            name='stok_id',
            field=models.ForeignKey(db_column='STOCK_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.stockcode', verbose_name='Stock Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='evntc_id',
            field=models.ForeignKey(db_column='EVT_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.eventcode', verbose_name='Event Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='facic_id',
            field=models.ForeignKey(db_column='FAC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='perc_id',
            field=models.ForeignKey(db_column='PER_ID', limit_choices_to={'perc_valid': True}, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.personnelcode', verbose_name='Personnel Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='prog_id',
            field=models.ForeignKey(db_column='PROGRAM_ID', limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.program', verbose_name='Program'),
        ),
        migrations.CreateModel(
            name='EnvSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('envc_id', models.ForeignKey(blank=True, db_column='ENV_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envcode', verbose_name='Environment Code')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnvCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_datetime', models.DateTimeField(db_column='START', verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, db_column='END', null=True, verbose_name='End date')),
                ('env_val', models.DecimalField(blank=True, db_column='VAL', decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('env_avg', models.BooleanField(db_column='AVERAGED', default=False, verbose_name='Is value an average?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('contx_id', models.ForeignKey(blank=True, db_column='CONTAINER_XREF_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='env_condition', to='bio_diversity.containerxref', verbose_name='Container Cross Reference')),
                ('envc_id', models.ForeignKey(db_column='ENV_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envcode', verbose_name='Environment variable')),
                ('envsc_id', models.ForeignKey(blank=True, db_column='ENV_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envsubjcode', verbose_name='Environment Subjective Code')),
                ('inst_id', models.ForeignKey(blank=True, db_column='INSTRUM_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instrument', verbose_name='Instrument')),
                ('loc_id', models.ForeignKey(blank=True, db_column='LOCATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='env_condition', to='bio_diversity.location', verbose_name='Location')),
                ('qual_id', models.ForeignKey(db_column='QUAL_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality of observation')),
            ],
            options={
                'unique_together': {('contx_id', 'loc_id', 'inst_id', 'envc_id', 'envsc_id', 'start_datetime')},
            },
        ),
        migrations.CreateModel(
            name='EnvCondFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('env_pdf', models.FileField(blank=True, db_column='RAW_FILE', null=True, upload_to=bio_diversity.models.envcf_directory_path, verbose_name='Environment Condition File')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('env_id', models.OneToOneField(db_column='ENV_COND_ID', on_delete=django.db.models.deletion.CASCADE, related_name='envcf_id', to='bio_diversity.envcondition', verbose_name='Environment Condition')),
            ],
            options={
                'ordering': ['created_date'],
            },
        ),
        migrations.AddField(
            model_name='envcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, db_column='UNIT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.CreateModel(
            name='Drawer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('heat_id', models.ForeignKey(db_column='HEATH_UNIT_ID', on_delete=django.db.models.deletion.CASCADE, related_name='draws', to='bio_diversity.heathunit', verbose_name='Heath Unit')),
            ],
            options={
                'ordering': ['heat_id', 'name'],
                'unique_together': {('name', 'heat_id')},
            },
        ),
        migrations.CreateModel(
            name='DataLoader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('data_csv', models.FileField(blank=True, null=True, upload_to='', verbose_name='Datafile')),
                ('evnt_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.event', verbose_name='Event')),
                ('evntc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.eventcode', verbose_name='Data Format')),
                ('facic_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Data Format')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='cup',
            name='draw_id',
            field=models.ForeignKey(db_column='DRAWER_ID', on_delete=django.db.models.deletion.CASCADE, related_name='cups', to='bio_diversity.drawer', verbose_name='Drawer'),
        ),
        migrations.CreateModel(
            name='CountDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.CharField(blank=True, db_column='VAL', max_length=20, null=True, verbose_name='Value')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('adsc_id', models.ForeignKey(blank=True, db_column='ANI_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code')),
                ('anidc_id', models.ForeignKey(db_column='ANI_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code')),
                ('cnt_id', models.ForeignKey(db_column='COUNT_ID', on_delete=django.db.models.deletion.CASCADE, related_name='count_details', to='bio_diversity.count', verbose_name='Count')),
                ('qual_id', models.ForeignKey(db_column='QUAL_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
            ],
            options={
                'unique_together': {('cnt_id', 'anidc_id', 'adsc_id')},
            },
        ),
        migrations.AddField(
            model_name='count',
            name='cntc_id',
            field=models.ForeignKey(db_column='CNT_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.countcode', verbose_name='Count Code'),
        ),
        migrations.AddField(
            model_name='count',
            name='coll_id',
            field=models.ForeignKey(blank=True, db_column='COLLECTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.collection', verbose_name='Collection'),
        ),
        migrations.AddField(
            model_name='count',
            name='contx_ref',
            field=models.ForeignKey(blank=True, db_column='CONT_XREF_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counts', to='bio_diversity.containerxref', verbose_name='Container Reference'),
        ),
        migrations.AddField(
            model_name='count',
            name='loc_id',
            field=models.ForeignKey(blank=True, db_column='LOCATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counts', to='bio_diversity.location', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='count',
            name='spec_id',
            field=models.ForeignKey(db_column='SPEC_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.AddField(
            model_name='count',
            name='stok_id',
            field=models.ForeignKey(blank=True, db_column='STOCK_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.stockcode', verbose_name='Stock Code'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='cup_id',
            field=models.ForeignKey(blank=True, db_column='CUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.cup', verbose_name='Cup'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='draw_id',
            field=models.ForeignKey(blank=True, db_column='DRAWER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.drawer', verbose_name='Drawer'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='evnt_id',
            field=models.ForeignKey(db_column='EVENT_ID', on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='bio_diversity.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='heat_id',
            field=models.ForeignKey(blank=True, db_column='HEATH_UNIT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.heathunit', verbose_name='Heath Unit'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='tank_id',
            field=models.ForeignKey(blank=True, db_column='TANK_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.tank', verbose_name='Tank'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='team_id',
            field=models.ForeignKey(blank=True, db_column='TEAM_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.teamxref', verbose_name='Team'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='tray_id',
            field=models.ForeignKey(blank=True, db_column='TRAY_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.tray', verbose_name='Tray'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='trof_id',
            field=models.ForeignKey(blank=True, db_column='TROUGH_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.trough', verbose_name='Trough'),
        ),
        migrations.AddField(
            model_name='containerdetcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, db_column='UNIT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.CreateModel(
            name='CommentKeywords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(max_length=255)),
                ('adsc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code')),
            ],
            options={
                'ordering': ['keyword'],
            },
        ),
        migrations.CreateModel(
            name='BioUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_admin', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='app administrator')),
                ('is_author', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='app author')),
                ('is_user', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='app user')),
                ('mode', models.IntegerField(choices=[(1, 'read'), (2, 'edit')], default=1)),
                ('facic_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bio_diversity.facilitycode', verbose_name='Facility')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bio_user', to=settings.AUTH_USER_MODEL, verbose_name='DM Apps user')),
            ],
            options={
                'ordering': ['-is_admin', 'user__first_name'],
            },
        ),
        migrations.AddField(
            model_name='animaldetcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, db_column='UNIT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='anidetsubjcode',
            name='anidc_id',
            field=models.ForeignKey(db_column='ANI_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Type of measurement'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='contx_id',
            field=models.ForeignKey(blank=True, db_column='CONTAINER_XREF_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.containerxref', verbose_name='Container Cross Reference'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='evnt_id',
            field=models.ForeignKey(db_column='EVENT_ID', on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='grp_id',
            field=models.ForeignKey(blank=True, db_column='GROUP_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.group', verbose_name='Group'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='indv_id',
            field=models.ForeignKey(blank=True, db_column='INDIV_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.individual', verbose_name='Individual'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='loc_id',
            field=models.ForeignKey(blank=True, db_column='LOCATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.location', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='pair_id',
            field=models.ForeignKey(blank=True, db_column='PAIR_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.pairing', verbose_name='Pairing'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='team_id',
            field=models.ForeignKey(blank=True, db_column='TEAM_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.teamxref', verbose_name='Team'),
        ),
        migrations.AlterUniqueTogether(
            name='tray',
            unique_together={('name', 'trof_id', 'start_date')},
        ),
        migrations.AlterUniqueTogether(
            name='subrivercode',
            unique_together={('name', 'rive_id', 'trib_id')},
        ),
        migrations.CreateModel(
            name='Sire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('choice', models.IntegerField(db_column='CHOICE', verbose_name='Choice')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('indv_id', models.ForeignKey(blank=True, db_column='UFID', limit_choices_to={'indv_valid': True, 'pit_tag__isnull': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sires', to='bio_diversity.individual', verbose_name='Individual')),
                ('pair_id', models.ForeignKey(db_column='PAIR_ID', limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, related_name='sires', to='bio_diversity.pairing', verbose_name='Pairing')),
                ('prio_id', models.ForeignKey(db_column='PRIORITY_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.prioritycode', verbose_name='Priority')),
                ('samp_id', models.ForeignKey(blank=True, db_column='SAMPLE', limit_choices_to={'anix_id__isnull': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sires', to='bio_diversity.sample', verbose_name='Sample')),
            ],
            options={
                'unique_together': {('indv_id', 'samp_id', 'pair_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='sample',
            unique_together={('loc_id', 'anix_id', 'samp_num', 'spec_id', 'sampc_id')},
        ),
        migrations.AlterUniqueTogether(
            name='pairing',
            unique_together={('indv_id', 'samp_id', 'start_date')},
        ),
        migrations.CreateModel(
            name='MoveDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('move_date', models.DateField(db_column='MOVE_DATE', verbose_name='Date move was recorded')),
                ('anix_id', models.ForeignKey(blank=True, db_column='ANI_DET_X_REF_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetailxref', verbose_name='Animal Detail X Ref')),
                ('contx_end', models.ForeignKey(blank=True, db_column='CONTAINER_XREF_END_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='move_end', to='bio_diversity.containerxref', verbose_name='Container Cross Reference End')),
                ('contx_start', models.ForeignKey(blank=True, db_column='CONTAINER_XREF_START_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='move_start', to='bio_diversity.containerxref', verbose_name='Container Cross Reference')),
            ],
            options={
                'unique_together': {('anix_id', 'contx_start', 'contx_end', 'move_date')},
            },
        ),
        migrations.CreateModel(
            name='LocationDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.CharField(blank=True, db_column='VAL', max_length=20, null=True, verbose_name='Value')),
                ('detail_date', models.DateField(db_column='DETAIL_DATE', verbose_name='Date detail was recorded')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('ldsc_id', models.ForeignKey(blank=True, db_column='LOC_DET_SUBJ_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.locdetsubjcode', verbose_name='Location Detail Subjective Code')),
                ('loc_id', models.ForeignKey(db_column='LOCATION_ID', on_delete=django.db.models.deletion.CASCADE, related_name='loc_dets', to='bio_diversity.location', verbose_name='Location')),
                ('locdc_id', models.ForeignKey(db_column='LOC_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.locationdetcode', verbose_name='Location Detail Code')),
                ('qual_id', models.ForeignKey(db_column='QUAL_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
            ],
            options={
                'unique_together': {('loc_id', 'locdc_id', 'ldsc_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('evnt_id', 'locc_id', 'rive_id', 'trib_id', 'subr_id', 'relc_id', 'loc_lat', 'loc_lon', 'loc_date')},
        ),
        migrations.CreateModel(
            name='InstrumentDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(db_column='START', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_column='END', null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('det_value', models.DecimalField(db_column='VAL', decimal_places=5, max_digits=11, verbose_name='Value')),
                ('inst_id', models.ForeignKey(db_column='INSTRUM_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instrument', verbose_name='Instrument')),
                ('instdc_id', models.ForeignKey(db_column='INST_DET_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instdetcode', verbose_name='Instrument Detail Code')),
            ],
            options={
                'unique_together': {('inst_id', 'instdc_id', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='IndTreatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_datetime', models.DateTimeField(db_column='START', verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, db_column='END', null=True, verbose_name='End date')),
                ('lot_num', models.CharField(blank=True, db_column='LOT_NUMBER', max_length=30, null=True, verbose_name='Lot Number')),
                ('dose', models.DecimalField(db_column='DOSE', decimal_places=3, max_digits=7, verbose_name='Dose')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('anix_id', models.ForeignKey(db_column='ANI_DET_XREF_ID', on_delete=django.db.models.deletion.CASCADE, related_name='individual_treatments', to='bio_diversity.anidetailxref', verbose_name='Animal Detail Cross Reference')),
                ('indvtc_id', models.ForeignKey(db_column='IND_TEART_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.indtreatcode', verbose_name='Individual Treatment Code')),
                ('unit_id', models.ForeignKey(db_column='UNIT_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units')),
            ],
            options={
                'unique_together': {('anix_id', 'indvtc_id')},
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('img_png', models.FileField(blank=True, db_column='IMAGE', null=True, upload_to=bio_diversity.models.img_directory_path, verbose_name='Document File')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('cntd_id', models.ForeignKey(blank=True, db_column='COUNT_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.countdet', verbose_name='Count Detail')),
                ('cupd_id', models.ForeignKey(blank=True, db_column='CUP_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.cupdet', verbose_name='Cup Detail')),
                ('draw_id', models.ForeignKey(blank=True, db_column='DRAWER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.drawer', verbose_name='Drawer')),
                ('grpd_id', models.ForeignKey(blank=True, db_column='GROUP_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.groupdet', verbose_name='Group Detail')),
                ('heatd_id', models.ForeignKey(blank=True, db_column='HEATH_UNIT_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.heathunitdet', verbose_name='Heath Unit Detail')),
                ('imgc_id', models.ForeignKey(db_column='IMG_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.imagecode', verbose_name='Document Code')),
                ('indvd_id', models.ForeignKey(blank=True, db_column='INDIV_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.individualdet', verbose_name='Individual Detail')),
                ('loc_id', models.ForeignKey(blank=True, db_column='LOCATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.location', verbose_name='Location')),
                ('sampd_id', models.ForeignKey(blank=True, db_column='SAMP_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.sampledet', verbose_name='Sample Detail')),
                ('spwnd_id', models.ForeignKey(blank=True, db_column='SPAWN_DETAIL_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.spawndet', verbose_name='Spawn Detail')),
                ('tankd_id', models.ForeignKey(blank=True, db_column='TANK_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.tankdet', verbose_name='Tank Detail')),
                ('trayd_id', models.ForeignKey(blank=True, db_column='TRAY_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.traydet', verbose_name='Tray Detail')),
                ('trofd_id', models.ForeignKey(blank=True, db_column='TROUGH_DET_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.troughdet', verbose_name='Trough Detail')),
            ],
            options={
                'unique_together': {('imgc_id', 'loc_id', 'cntd_id', 'grpd_id', 'sampd_id', 'indvd_id', 'spwnd_id', 'tankd_id', 'heatd_id', 'draw_id', 'trofd_id', 'trayd_id', 'cupd_id')},
            },
        ),
        migrations.CreateModel(
            name='Feeding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('lot_num', models.CharField(blank=True, db_column='LOT_NUMBER', max_length=40, null=True, verbose_name='Lot Number')),
                ('amt', models.DecimalField(db_column='AMOUNT', decimal_places=3, max_digits=7, verbose_name='Amount of Feed')),
                ('freq', models.CharField(blank=True, db_column='FREQUENCY', max_length=40, null=True, verbose_name='Description of frequency')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('contx_id', models.ForeignKey(db_column='CONTAINER_XREF_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerxref', verbose_name='Container Cross Reference')),
                ('feedc_id', models.ForeignKey(db_column='FEED_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.feedcode', verbose_name='Feeding Code')),
                ('feedm_id', models.ForeignKey(db_column='FEEDMETHOD_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.feedmethod', verbose_name='Feeding Method')),
                ('unit_id', models.ForeignKey(db_column='UNIT_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units')),
            ],
            options={
                'unique_together': {('contx_id', 'feedm_id', 'feedc_id', 'amt', 'unit_id')},
            },
        ),
        migrations.CreateModel(
            name='Fecundity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(db_column='START', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_column='END', null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(db_column='STILL_VALID', default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('alpha', models.DecimalField(db_column='A', decimal_places=3, max_digits=10, verbose_name='A')),
                ('beta', models.DecimalField(db_column='B', decimal_places=3, max_digits=10, verbose_name='B')),
                ('coll_id', models.ForeignKey(blank=True, db_column='COLLECTION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.collection', verbose_name='Collection')),
                ('stok_id', models.ForeignKey(db_column='STOCK_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.stockcode', verbose_name='Stock Code')),
            ],
            options={
                'unique_together': {('stok_id', 'coll_id', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='EventFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('evntf_xls', models.FileField(blank=True, db_column='EVENT_FILE', null=True, upload_to=bio_diversity.models.evntf_directory_path, verbose_name='Event File')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('evnt_id', models.ForeignKey(db_column='EVENT_ID', on_delete=django.db.models.deletion.CASCADE, related_name='event_files', to='bio_diversity.event', verbose_name='Event')),
                ('evntfc_id', models.ForeignKey(db_column='EVT_FILE_CODE_ID', on_delete=django.db.models.deletion.CASCADE, related_name='event_files', to='bio_diversity.eventfilecode', verbose_name='Event File Code')),
                ('stok_id', models.ForeignKey(blank=True, db_column='STOCK_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_files', to='bio_diversity.stockcode', verbose_name='Stock Code')),
            ],
            options={
                'unique_together': {('evnt_id', 'stok_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('facic_id', 'evntc_id', 'prog_id', 'start_datetime', 'end_datetime')},
        ),
        migrations.CreateModel(
            name='EnvTreatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_datetime', models.DateTimeField(db_column='START', verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, db_column='END', null=True, verbose_name='End date')),
                ('lot_num', models.CharField(blank=True, db_column='LOT_NUMBER', max_length=30, null=True, verbose_name='Lot Number')),
                ('amt', models.DecimalField(db_column='AMOUNT', decimal_places=3, max_digits=7, verbose_name='Dose')),
                ('concentration', models.DecimalField(blank=True, db_column='CONCENTRATION', decimal_places=7, max_digits=8, null=True, verbose_name='Concentration')),
                ('duration', models.DecimalField(db_column='DURATION', decimal_places=0, max_digits=5, verbose_name='Duration (minutes)')),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=2000, null=True, verbose_name='Comments')),
                ('contx_id', models.ForeignKey(db_column='CONTAINER_XREF_ID', on_delete=django.db.models.deletion.CASCADE, related_name='env_treatment', to='bio_diversity.containerxref', verbose_name='Container Cross Reference')),
                ('envtc_id', models.ForeignKey(db_column='ENV_TREAT_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envtreatcode', verbose_name='Environment Treatment Code')),
                ('unit_id', models.ForeignKey(db_column='UNIT_ID', on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units')),
            ],
            options={
                'unique_together': {('contx_id', 'envtc_id', 'start_datetime')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='cup',
            unique_together={('name', 'draw_id', 'start_date')},
        ),
        migrations.AlterUniqueTogether(
            name='count',
            unique_together={('loc_id', 'anix_id', 'cntc_id', 'contx_ref', 'spec_id', 'cnt_year', 'coll_id', 'stok_id', 'cnt_date')},
        ),
        migrations.AlterUniqueTogether(
            name='containerxref',
            unique_together={('evnt_id', 'tank_id', 'trof_id', 'tray_id', 'heat_id', 'draw_id', 'cup_id', 'team_id')},
        ),
        migrations.AlterUniqueTogether(
            name='anidetailxref',
            unique_together={('evnt_id', 'contx_id', 'loc_id', 'indv_id', 'pair_id', 'grp_id', 'team_id')},
        ),
    ]
