# Generated by Django 3.2.10 on 2022-01-12 13:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('shared_models', '0030_remove_river_fishing_area_code'),
        ('ppt', '0019_activity_parent'),
    ]

    operations = [
        migrations.CreateModel(
            name='DMA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(0, 'Unevaluated'), (1, 'On-track'), (2, 'Complete'), (3, 'Encountering issues'), (4, 'Aborted / cancelled')], default=3, editable=False)),
                ('title', models.CharField(help_text='What is the title of the Data Management Agreement?', max_length=1000, verbose_name='Title')),
                ('data_contact', models.TextField(blank=True, help_text='i.e., who is the primary responsible party?', null=True, verbose_name='Who will be the principal steward of this data?')),
                ('metadata_contact', models.TextField(blank=True, help_text='i.e., who is responsible for keeping metadata records up-to-date?', null=True, verbose_name='Who is responsible for creating and maintaining the metadata?')),
                ('metadata_tool', models.TextField(blank=True, help_text='e.g., Metadata Inventory app in DM Apps, DFO Enterprise Data Hub, Federal Geospatial Portal, stand-alone file, ...', null=True, verbose_name='Describe the tools or processes that will be used to create metadata')),
                ('metadata_url', models.TextField(blank=True, help_text='Full link to any metadata records available online, if applicable', null=True, verbose_name='Please provide any URLs to the metadata')),
                ('metadata_update_freq', models.IntegerField(blank=True, choices=[(1, 'Daily'), (2, 'Weekly'), (3, 'Monthly'), (4, 'Annually'), (5, 'Irregular / as needed'), (9, 'Other')], help_text='What should be the expectation for how often the metadata is updated?', null=True, verbose_name='At what frequency should the metadata be updated? ')),
                ('metadata_freq_text', models.TextField(blank=True, help_text='What justification can be provided for the above selection?', null=True, verbose_name='Justification for frequency:')),
                ('storage_solutions', models.TextField(blank=True, null=True, verbose_name='Which storage solution(s) will be used to house the raw field data, processed data, and all other data products?')),
                ('storage_solution_text', models.TextField(blank=True, help_text='Provide your rational for the selection(s) made above.', null=True, verbose_name='Justification for storage solution:')),
                ('storage_needed', models.TextField(blank=True, help_text='This includes raw field data, processed data, and all other data products etc.)', null=True, verbose_name='What is the estimated storage space needed for the above?')),
                ('raw_data_retention', models.TextField(blank=True, help_text='This would include instrument data, field sheets, physical samples etc. Please refer to the DFO EOS Retention Policy for clarification)', null=True, verbose_name='What is the retention policy for the raw field data?')),
                ('data_retention', models.TextField(blank=True, help_text='Please refer to the DFO EOS Retention Policy for clarification.', null=True, verbose_name='What is the retention policy for the data?')),
                ('backup_plan', models.TextField(blank=True, null=True, verbose_name='What procedures will be taken to back-up/secure the data?')),
                ('cloud_costs', models.BooleanField(blank=True, help_text="e.g., cloud storage is estimated at $1000/yr and will be paid for under the the division manager's budget", null=True, verbose_name='If using cloud storage, what is the estimated annual cost and who will be covering the cost? ')),
                ('had_sharing_agreements', models.BooleanField(default=False, verbose_name='Is the dataset subject to a data sharing agreement, MOU, etc.?')),
                ('sharing_agreements_text', models.TextField(blank=True, help_text='please provide the name of the organization and the primary contact for each agreement.', null=True, verbose_name='If yes, who are the counterparts for the agreement(s)?')),
                ('publication_timeframe', models.TextField(blank=True, help_text='The answer provided will set the expectation for the open data publication frequency', null=True, verbose_name='How soon after data collection will data be made available?')),
                ('publishing_platforms', models.TextField(blank=True, help_text="The best option is the Government of Canada's Open Data Platform however other platforms / publications are acceptable provided they are freely available to the general public.", null=True, verbose_name='Which open data publishing mechanism(s) will be used?')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Additional comments to take into consideration (if applicable):')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dma_created_by', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='ppt.project')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dma_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageSolution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DMAReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('decision', models.IntegerField(choices=[(0, 'Unevaluated'), (1, 'Compliant'), (2, 'Non-compliant')], default=0)),
                ('is_final_review', models.BooleanField(default=False, help_text='If so, please make sure to provide an explanation in the comments field.', verbose_name='Will this be the final review of this agreement?')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='comments')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dmareview_created_by', to=settings.AUTH_USER_MODEL)),
                ('dma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='ppt.dma')),
                ('fiscal_year', models.ForeignKey(default=2022, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ppt_dma_reviews', to='shared_models.fiscalyear')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dmareview_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('dma', 'fiscal_year')},
            },
        ),
    ]
