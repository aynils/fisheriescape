# Generated by Django 3.2.13 on 2022-05-02 15:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ppt.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('shared_models', '0031_subjectmatter_is_csas_request_tag'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='CSRFClientInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, editable=False, max_length=1000, null=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, editable=False, max_length=1000, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(verbose_name='additional client information (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='additional client information (fr)')),
            ],
            options={
                'ordering': ['csrf_priority__code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CSRFPriority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=25, unique=True, verbose_name='Priority identification number')),
                ('name', models.CharField(max_length=1000, verbose_name='priority for research (en)')),
                ('nom', models.CharField(blank=True, max_length=1000, null=True, verbose_name='priority for research (fr)')),
            ],
            options={
                'ordering': ['code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CSRFTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('code', models.CharField(max_length=25)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('cost_type', models.IntegerField(choices=[(1, 'Salary'), (2, 'O&M')])),
                ('exclude_from_rollup', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FunctionalGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('sections', models.ManyToManyField(blank=True, related_name='functional_groups2', to='shared_models.Section')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('name', models.CharField(max_length=255)),
                ('funding_source_type', models.IntegerField(choices=[(1, 'A-base'), (2, 'B-base'), (3, 'C-base')])),
                ('is_competitive', models.BooleanField(default=False, verbose_name='is competitive funding?')),
            ],
            options={
                'ordering': ['funding_source_type', 'name'],
                'unique_together': {('funding_source_type', 'name')},
            },
        ),
        migrations.CreateModel(
            name='HelpText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('eng_text', models.TextField(verbose_name='English text')),
                ('fra_text', models.TextField(blank=True, null=True, verbose_name='French text')),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['field_name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OMCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('group', models.IntegerField(choices=[(1, 'Travel'), (2, 'Equipment Purchase'), (3, 'Material and Supplies'), (4, 'Human Resources'), (5, 'Contracts, Leases, Services'), (6, 'Other')])),
            ],
            options={
                'ordering': ['group', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Project title')),
                ('overview', models.TextField(blank=True, null=True, verbose_name='Project overview')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Should the project be hidden from other users?')),
                ('species_involved', models.CharField(blank=True, max_length=1000, null=True, verbose_name='species involved (ACRDP)')),
                ('team_description', models.TextField(blank=True, null=True, verbose_name='description of team and required qualifications (ACRDP)')),
                ('rationale', models.TextField(blank=True, null=True, verbose_name='project problem / rationale (ACRDP)')),
                ('experimental_protocol', models.TextField(blank=True, null=True, verbose_name='experimental protocol (ACRDP)')),
                ('objectives', models.TextField(blank=True, null=True, verbose_name='project objectives (CSRF)')),
                ('innovation', models.TextField(blank=True, null=True, verbose_name='innovation (CSRF)')),
                ('other_funding', models.TextField(blank=True, null=True, verbose_name='other sources of funding (CSRF)')),
                ('reporting_mechanism', models.TextField(blank=True, null=True, verbose_name='quarterly reporting mechanisms (SARA)')),
                ('future_funding_needs', models.TextField(blank=True, null=True, verbose_name='description of future funding needs, if any (SARA)')),
                ('start_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Start date of project')),
                ('end_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='End date of project')),
                ('staff_search_field', models.CharField(blank=True, editable=False, max_length=5000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ppt.activitytype', verbose_name='activity type')),
                ('client_information', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='ppt.csrfclientinformation', verbose_name='Additional info supplied by client (#1) (CSRF)')),
                ('default_funding_source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='ppt.fundingsource', verbose_name='primary funding source')),
                ('fiscal_years', models.ManyToManyField(editable=False, to='shared_models.FiscalYear', verbose_name='fiscal years')),
                ('functional_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='ppt.functionalgroup', verbose_name='Functional group')),
                ('funding_sources', models.ManyToManyField(editable=False, to='ppt.FundingSource', verbose_name='complete list of funding sources')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ProjectYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Submitted'), (3, 'Reviewed'), (6, 'Recommended'), (4, 'Approved'), (5, 'Not Approved'), (9, 'Cancelled')], default=1, editable=False)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Start date for this year of the project')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date for this year of the project')),
                ('priorities', models.TextField(blank=True, null=True, verbose_name='year-specific priorities')),
                ('deliverables', models.TextField(blank=True, editable=False, null=True, verbose_name='deliverables / activities')),
                ('requires_specialized_equipment', models.BooleanField(default=False, verbose_name='Will the project require the purchase, design or fabrication of specialized laboratory or field equipment?')),
                ('technical_service_needs', models.TextField(blank=True, null=True, verbose_name='What technical services are being requested?')),
                ('mobilization_needs', models.TextField(blank=True, null=True, verbose_name='Do you anticipate needing assistance with mobilization/demobilization of this equipment?')),
                ('has_field_component', models.BooleanField(default=False, verbose_name='Does this project involved a field component?')),
                ('vehicle_needs', models.TextField(blank=True, null=True, verbose_name='Describe need for vehicle (type of vehicle, number of weeks, time-frame)')),
                ('has_ship_needs', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Ship (Coast Guard, charter vessel) Requirements?')),
                ('ship_needs', models.TextField(blank=True, null=True, verbose_name='Description of Ship (Coast Guard, charter vessel) Requirements')),
                ('coip_reference_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='If this project links to a ship time request in COIP, please include the COIP application number here.')),
                ('instrumentation', models.TextField(blank=True, null=True, verbose_name='What field instrumentation will be deployed during this project?')),
                ('owner_of_instrumentation', models.TextField(blank=True, null=True, verbose_name='Who is the owner/curator of this instrumentation, if known?')),
                ('requires_field_staff', models.BooleanField(default=False, verbose_name='Do you require field support staff?')),
                ('field_staff_needs', models.TextField(blank=True, null=True, verbose_name='If so, please include some additional detail, e.g., how many people are likely to be required and when')),
                ('has_data_component', models.BooleanField(default=False, verbose_name='Will new data be collected or generated?')),
                ('data_collected', models.TextField(blank=True, null=True, verbose_name='What type of data will be collected')),
                ('data_products', models.TextField(blank=True, null=True, verbose_name='What data products will be generated (e.g. models, indices)?')),
                ('open_data_eligible', models.BooleanField(default=False, verbose_name='Are these data / data products eligible to be placed on the Open Data Platform?')),
                ('data_storage_plan', models.TextField(blank=True, null=True, verbose_name='Data storage / archiving plan')),
                ('data_management_needs', models.TextField(blank=True, null=True, verbose_name='Describe what data management support is required, if any.')),
                ('has_lab_component', models.BooleanField(default=False, verbose_name='Does this project involve laboratory work?')),
                ('requires_abl_services', models.BooleanField(default=False, editable=False, verbose_name='Does this project require the services of Aquatic Biotechnology Lab (ABL)?')),
                ('requires_lab_space', models.BooleanField(default=False, verbose_name='Is laboratory space required?')),
                ('requires_other_lab_support', models.BooleanField(default=False, verbose_name='Does this project require other specialized laboratory support or services (provide details below)?')),
                ('other_lab_support_needs', models.TextField(blank=True, null=True, verbose_name='Describe other laboratory requirements relevant for project planning purposes.')),
                ('it_needs', models.TextField(blank=True, null=True, verbose_name='Special IT requirements (software, licenses, hardware)')),
                ('additional_notes', models.TextField(blank=True, null=True, verbose_name='additional notes')),
                ('submitted', models.DateTimeField(blank=True, editable=False, null=True)),
                ('administrative_notes', models.TextField(blank=True, null=True, verbose_name='administrative notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coding', models.TextField(blank=True, editable=False, null=True, verbose_name='financial coding')),
                ('allotment_code', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects_ppt', to='shared_models.allotmentcode', verbose_name='allotment code (if known)')),
                ('existing_project_codes', models.ManyToManyField(blank=True, related_name='projects', to='shared_models.Project', verbose_name='existing project codes (if known)')),
                ('fiscal_year', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='shared_models.fiscalyear', verbose_name='fiscal year')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='last_mod_by_projects_projectyear', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='years', to='ppt.project', verbose_name='project')),
                ('responsibility_center', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects_ppt', to='shared_models.responsibilitycenter', verbose_name='responsibility center (if known)')),
            ],
            options={
                'ordering': ['project', 'fiscal_year'],
            },
        ),
        migrations.CreateModel(
            name='StorageSolution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UpcomingDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description_en', models.TextField(verbose_name='description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='description (fr)')),
                ('date', models.DateTimeField()),
                ('is_deadline', models.BooleanField(default=False)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_upcoming_dates2', to='shared_models.region', verbose_name='region')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='StatusReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(3, 'On-track'), (4, 'Complete'), (5, 'Encountering issues'), (6, 'Aborted / cancelled')], default=3)),
                ('major_accomplishments', models.TextField(blank=True, null=True, verbose_name='major accomplishments')),
                ('major_issues', models.TextField(blank=True, null=True, verbose_name='major issues encountered')),
                ('target_completion_date', models.DateTimeField(blank=True, null=True, verbose_name='target completion date')),
                ('rationale_for_modified_completion_date', models.TextField(blank=True, null=True, verbose_name='rationale for a modified completion date')),
                ('general_comment', models.TextField(blank=True, null=True, verbose_name='general comments')),
                ('section_head_comment', models.TextField(blank=True, null=True, verbose_name='section head comment')),
                ('section_head_reviewed', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='reviewed by section head')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='last_mod_by_projects_status_report', to=settings.AUTH_USER_MODEL)),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='ppt.projectyear')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(blank=True, default=0, null=True, verbose_name='amount (CAD)')),
                ('is_lead', models.BooleanField(choices=[(True, 'yes'), (False, 'no')], default=False, verbose_name='project lead')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Person name (leave blank if user is selected)')),
                ('student_program', models.IntegerField(blank=True, choices=[(1, 'FSWEP'), (2, 'Coop')], null=True, verbose_name='student program')),
                ('duration_weeks', models.FloatField(blank=True, default=0, null=True, verbose_name='duration (weeks)')),
                ('overtime_hours', models.FloatField(blank=True, default=0, null=True, verbose_name='overtime (hours)')),
                ('overtime_description', models.TextField(blank=True, null=True, verbose_name='overtime description')),
                ('role', models.TextField(blank=True, null=True, verbose_name='role in the project')),
                ('expertise', models.TextField(blank=True, null=True, verbose_name='key expertise')),
                ('employee_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ppt.employeetype', verbose_name='employee type')),
                ('funding_source', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='ppt.fundingsource', verbose_name='funding source')),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ppt.level', verbose_name='level')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ppt.projectyear', verbose_name='project year')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='staff_instances2', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-is_lead', 'employee_type', 'level'],
                'unique_together': {('project_year', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('coordinator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='services', to=settings.AUTH_USER_MODEL, verbose_name='service coordinator')),
                ('regions', models.ManyToManyField(blank=True, related_name='services', to='shared_models.Region', verbose_name='For which regions')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collaboration_score', models.IntegerField(blank=True, choices=[(3, 'High'), (2, 'Medium'), (1, 'Low')], null=True, verbose_name='External Pressures')),
                ('collaboration_comment', models.TextField(blank=True, null=True, verbose_name='External Pressures comments')),
                ('strategic_score', models.IntegerField(blank=True, choices=[(3, 'High'), (2, 'Medium'), (1, 'Low')], null=True, verbose_name='Strategic Direction')),
                ('strategic_comment', models.TextField(blank=True, null=True, verbose_name='Strategic Direction comments')),
                ('operational_score', models.IntegerField(blank=True, choices=[(3, 'High'), (2, 'Medium'), (1, 'Low')], null=True, verbose_name='Operational Considerations')),
                ('operational_comment', models.TextField(blank=True, null=True, verbose_name='Operational Considerations comments')),
                ('ecological_score', models.IntegerField(blank=True, choices=[(3, 'High'), (2, 'Medium'), (1, 'Low')], null=True, verbose_name='Ecological Impact')),
                ('ecological_comment', models.TextField(blank=True, null=True, verbose_name='Ecological Impact comments')),
                ('scale_score', models.IntegerField(blank=True, choices=[(3, 'High'), (2, 'Medium'), (1, 'Low')], null=True, verbose_name='scale')),
                ('scale_comment', models.TextField(blank=True, null=True, verbose_name='scale comments')),
                ('general_comment', models.TextField(blank=True, null=True, verbose_name='general comments')),
                ('comments_for_staff', models.TextField(blank=True, null=True, verbose_name='questions and comments for project leads')),
                ('approval_status', models.IntegerField(blank=True, choices=[(1, 'Approved'), (2, 'Recommended'), (0, 'Not approved'), (9, 'Cancelled')], null=True, verbose_name='Approval status')),
                ('approval_level', models.IntegerField(blank=True, choices=[(1, 'Division-level'), (2, 'Branch-level'), (3, 'National-level')], null=True, verbose_name='level of approval')),
                ('funding_status', models.IntegerField(blank=True, choices=[(1, 'Fully funded'), (2, 'Partially funded'), (3, 'Unfunded')], null=True, verbose_name='funding status')),
                ('allocated_budget', models.FloatField(blank=True, null=True, verbose_name='Allocated budget')),
                ('approval_notification_email_sent', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Notification Email Sent')),
                ('review_notification_email_sent', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Notification Email Sent')),
                ('approver_comment', models.TextField(blank=True, null=True, verbose_name='Approver comments (shared with project leads)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_score', models.IntegerField(blank=True, editable=False, null=True, verbose_name='total score')),
                ('last_modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='last_mod_by_projects_review', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ManyToManyField(editable=False, to=settings.AUTH_USER_MODEL)),
                ('project_year', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='ppt.projectyear')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('file_en', models.FileField(upload_to=ppt.models.ref_mat_directory_path, verbose_name='file attachment (English)')),
                ('file_fr', models.FileField(blank=True, null=True, upload_to=ppt.models.ref_mat_directory_path, verbose_name='file attachment (French)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reference_materials2', to='shared_models.region', verbose_name='region')),
            ],
            options={
                'ordering': ['region', '-updated_at'],
            },
        ),
        migrations.AddField(
            model_name='projectyear',
            name='services',
            field=models.ManyToManyField(blank=True, related_name='years', to='ppt.Service', verbose_name='Will any of the following services be required?'),
        ),
        migrations.AddField(
            model_name='project',
            name='lead_staff',
            field=models.ManyToManyField(editable=False, to='ppt.Staff', verbose_name='project leads'),
        ),
        migrations.AddField(
            model_name='project',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='last_mod_by_projects_project', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='shared_models.organization', verbose_name='physical location (ACRDP)'),
        ),
        migrations.AddField(
            model_name='project',
            name='references',
            field=models.ManyToManyField(blank=True, editable=False, related_name='projects', to='shared_models.Citation', verbose_name='references'),
        ),
        migrations.AddField(
            model_name='project',
            name='second_priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='ppt.csrfpriority', verbose_name='Linkage to second priority (CSRF)'),
        ),
        migrations.AddField(
            model_name='project',
            name='section',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ppt', to='shared_models.section', verbose_name='section'),
        ),
        migrations.AddField(
            model_name='project',
            name='starting_fy',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_starting_years', to='shared_models.fiscalyear', verbose_name='starting fiscal year'),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='projects', to='ppt.Tag', verbose_name='Tags / keywords'),
        ),
        migrations.CreateModel(
            name='PPTAdminUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_national_admin', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='national administrator?')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects_admin_user', to='shared_models.region', verbose_name='regional administrator?')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ppt_admin_user', to=settings.AUTH_USER_MODEL, verbose_name='DM Apps user')),
            ],
            options={
                'ordering': ['-is_national_admin', 'region', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='OMCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(blank=True, default=0, null=True, verbose_name='amount (CAD)')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('funding_source', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='ppt.fundingsource', verbose_name='funding source')),
                ('om_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='om_costs', to='ppt.omcategory', verbose_name='category')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ppt.projectyear', verbose_name='project year')),
            ],
            options={
                'ordering': ['om_category'],
            },
        ),
        migrations.CreateModel(
            name='GCCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Recipient organization')),
                ('project_lead', models.CharField(blank=True, max_length=255, null=True, verbose_name='project lead')),
                ('proposed_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Proposed title of agreement')),
                ('gc_program', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name of G&C program')),
                ('amount', models.FloatField(default=0, verbose_name='amount (CAD)')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gc_costs', to='ppt.projectyear', verbose_name='project year')),
            ],
            options={
                'ordering': ['recipient_org'],
            },
        ),
        migrations.AddField(
            model_name='functionalgroup',
            name='theme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='functional_groups', to='ppt.theme'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='resource name')),
                ('file', models.FileField(blank=True, null=True, upload_to=ppt.models.file_directory_path, verbose_name='file attachment')),
                ('external_url', models.URLField(blank=True, null=True, verbose_name='external URL')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='ppt.project')),
                ('project_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='ppt.projectyear')),
                ('status_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='ppt.statusreport')),
            ],
            options={
                'ordering': ['project', 'project_year', 'status_report', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DMA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(0, 'Unevaluated'), (1, 'On-track'), (2, 'Complete'), (3, 'Encountering issues'), (4, 'Aborted / cancelled')], default=3, editable=False)),
                ('title', models.CharField(help_text='What is the title of the Data Management Agreement?', max_length=1000, verbose_name='Title')),
                ('data_contact', models.CharField(blank=True, help_text='i.e., who is the primary responsible party?', max_length=500, null=True, verbose_name='Who is the principal steward of this data?')),
                ('metadata_contact', models.CharField(blank=True, help_text='i.e., who is responsible for keeping metadata records up-to-date?', max_length=500, null=True, verbose_name='Who is responsible for creating and maintaining the metadata?')),
                ('metadata_tool', models.TextField(blank=True, help_text='e.g., Metadata Inventory app in DM Apps, DFO Enterprise Data Hub, Federal Geospatial Portal, stand-alone file, ...', null=True, verbose_name='Describe the tools or processes that will be used to create metadata')),
                ('metadata_url', models.CharField(blank=True, help_text='Full link to any metadata records available online, if applicable', max_length=1000, null=True, verbose_name='Please provide any URLs to the metadata')),
                ('metadata_update_freq', models.IntegerField(blank=True, choices=[(1, 'Daily'), (2, 'Weekly'), (3, 'Monthly'), (4, 'Annually'), (5, 'Irregular / as needed'), (9, 'Other')], help_text='What should be the expectation for how often the metadata is updated?', null=True, verbose_name='At what frequency should the metadata be updated? ')),
                ('metadata_freq_text', models.TextField(blank=True, help_text='What justification can be provided for the above selection?', null=True, verbose_name='Justification for frequency:')),
                ('storage_solution_text', models.TextField(blank=True, help_text='Provide your rational for the selection(s) made above.', null=True, verbose_name='Justification for selection of storage solution(s)')),
                ('storage_needed', models.TextField(blank=True, help_text='This includes raw field data, processed data, and all other data products etc.)', null=True, verbose_name='What is the estimated storage space needed for the above?')),
                ('raw_data_retention', models.TextField(blank=True, help_text='This would include instrument data, field sheets, physical samples etc. Please refer to the DFO EOS Retention Policy for clarification)', null=True, verbose_name='What is the retention policy for the raw field data?')),
                ('data_retention', models.TextField(blank=True, help_text='Please refer to the DFO EOS Retention Policy for clarification.', null=True, verbose_name='What is the retention policy for the data?')),
                ('backup_plan', models.TextField(blank=True, null=True, verbose_name='What procedures will be taken to back-up/secure the data?')),
                ('cloud_costs', models.TextField(blank=True, help_text="e.g., cloud storage is estimated at $1000/yr and will be paid for under the the division manager's budget", null=True, verbose_name='If using cloud storage, what is the estimated annual cost and who will be covering the cost? ')),
                ('had_sharing_agreements', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Is the dataset subject to a data sharing agreement, MOU, etc.?')),
                ('sharing_agreements_text', models.TextField(blank=True, help_text='please provide the name of the organization and the primary contact for each agreement.', null=True, verbose_name='If yes, who are the counterparts for the agreement(s)?')),
                ('publication_timeframe', models.TextField(blank=True, help_text='The answer provided will set the expectation for the open data publication frequency', null=True, verbose_name='How soon after data collection will data be made available?')),
                ('publishing_platforms', models.TextField(blank=True, help_text="The best option is the Government of Canada's Open Data Platform however other platforms / publications are acceptable provided they are freely available to the general public.", null=True, verbose_name='Which open data publishing mechanism(s) will be used?')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Additional comments to take into consideration (if applicable):')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dma_created_by', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='ppt.project')),
                ('storage_solutions', models.ManyToManyField(blank=True, to='ppt.StorageSolution', verbose_name='Which storage solution(s) will be used to house the raw field data, processed data, and all other data products?')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dma_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Management Agreement',
                'ordering': ['project__section__division__branch__sector__region', 'project__section__division', 'project__section'],
            },
        ),
        migrations.CreateModel(
            name='CSRFSubTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('name', models.CharField(max_length=1000, verbose_name='name (en)')),
                ('csrf_theme', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sub_themes', to='ppt.csrftheme', verbose_name='CSRF theme')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='csrfpriority',
            name='csrf_sub_theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='priorities', to='ppt.csrfsubtheme', verbose_name='CSRF sub-theme'),
        ),
        migrations.AddField(
            model_name='csrfclientinformation',
            name='csrf_priority',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='client_information', to='ppt.csrfpriority', verbose_name='CSRF priority'),
        ),
        migrations.AddField(
            model_name='csrfclientinformation',
            name='fiscal_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='shared_models.fiscalyear', verbose_name='fiscal year'),
        ),
        migrations.CreateModel(
            name='Collaborator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('critical', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=True, verbose_name='Critical to project delivery')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborators', to='ppt.projectyear', verbose_name='project year')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CollaborativeAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partner_organization', models.CharField(blank=True, max_length=255, null=True, verbose_name='collaborating organization')),
                ('project_lead', models.CharField(blank=True, max_length=255, null=True, verbose_name='project lead')),
                ('agreement_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title of the agreement')),
                ('new_or_existing', models.IntegerField(choices=[(1, 'New'), (2, 'Existing')], verbose_name='new or existing')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agreements', to='ppt.projectyear', verbose_name='project year')),
            ],
            options={
                'ordering': ['partner_organization'],
            },
        ),
        migrations.CreateModel(
            name='Collaboration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'External Collaborator'), (2, 'Grant & Contribution Agreement'), (3, 'Collaborative Agreement')], verbose_name='collaboration type')),
                ('new_or_existing', models.IntegerField(choices=[(1, 'New'), (2, 'Existing')], verbose_name='new or existing')),
                ('organization', models.CharField(blank=True, max_length=1000, null=True, verbose_name='collaborating organization')),
                ('people', models.CharField(blank=True, max_length=1000, null=True, verbose_name='project lead(s)')),
                ('critical', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=True, verbose_name='Critical to project delivery?')),
                ('agreement_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title of the agreement')),
                ('gc_program', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name of G&C program')),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Contribution agreement amount')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborations', to='ppt.projectyear', verbose_name='project year')),
            ],
            options={
                'ordering': ['type', 'organization'],
            },
        ),
        migrations.CreateModel(
            name='CapitalCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(blank=True, default=0, null=True, verbose_name='amount (CAD)')),
                ('category', models.IntegerField(choices=[(1, 'IM / IT - computers, hardware'), (2, 'Lab Equipment'), (3, 'Field Equipment'), (4, 'Other')], verbose_name='category')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('funding_source', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='ppt.fundingsource', verbose_name='funding source')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ppt.projectyear', verbose_name='project year')),
            ],
            options={
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Milestone'), (2, 'Deliverable')])),
                ('name', models.CharField(max_length=500, verbose_name='name')),
                ('target_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Target start date (optional)')),
                ('target_date', models.DateTimeField(blank=True, null=True, verbose_name='Target end date (optional)')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('responsible_party', models.CharField(blank=True, max_length=500, null=True, verbose_name='responsible party notes')),
                ('risk_description', models.TextField(blank=True, null=True, verbose_name='Description of risks and their consequences')),
                ('impact', models.IntegerField(blank=True, choices=[(1, '1-Negligible'), (2, '2-Low'), (3, '3-Medium'), (4, '4-High'), (5, '5-Extreme')], null=True, verbose_name='what will be the impact if the risks occurs')),
                ('likelihood', models.IntegerField(blank=True, choices=[(1, '1-Very unlikely'), (2, '2-Unlikely'), (3, '3-Low'), (4, '4-Likely'), (5, '5-Almost certain')], null=True, verbose_name='what is the likelihood of the risks occurring')),
                ('risk_rating', models.IntegerField(blank=True, choices=[(None, 'n/a'), (1, 'Low'), (2, 'Medium'), (3, 'High')], editable=False, null=True)),
                ('mitigation_measures', models.TextField(blank=True, null=True, verbose_name='what measures will be used to mitigate the risks')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='ppt.activity', verbose_name='parent activity')),
                ('project_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='ppt.projectyear')),
                ('responsible_parties', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='responsible parties')),
            ],
            options={
                'ordering': ['project_year', 'target_start_date', 'target_date', 'name'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='projectyear',
            unique_together={('project', 'fiscal_year')},
        ),
        migrations.CreateModel(
            name='DMAReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('decision', models.IntegerField(choices=[(0, 'Unevaluated'), (1, 'Compliant'), (2, 'Non-compliant')], default=0)),
                ('is_final_review', models.BooleanField(default=False, help_text='If so, please make sure to provide an explanation in the comments field.', verbose_name='Will this be the final review of this agreement?')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='comments')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dmareview_created_by', to=settings.AUTH_USER_MODEL)),
                ('dma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='ppt.dma')),
                ('fiscal_year', models.ForeignKey(default=2023, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ppt_dma_reviews', to='shared_models.fiscalyear')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dmareview_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['fiscal_year', '-created_at'],
                'unique_together': {('dma', 'fiscal_year')},
            },
        ),
        migrations.CreateModel(
            name='ActivityUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(7, 'In progress'), (8, 'Completed'), (9, 'Aborted / cancelled')], default=7)),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='ppt.activity')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='activityupdate_created_by', to=settings.AUTH_USER_MODEL)),
                ('status_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='ppt.statusreport')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='activityupdate_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-status_report', 'status'],
                'unique_together': {('activity', 'status_report')},
            },
        ),
    ]
